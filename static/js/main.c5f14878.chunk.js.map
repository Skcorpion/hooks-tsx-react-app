{"version":3,"sources":["components/ColorsList.tsx","App.tsx","index.tsx"],"names":["ColorsList","colors","this","props","console","log","map","color","index","key","PureComponent","colorsFromServer","App","useState","count","setCount","query","setQuery","counter","setCounter","filteredQuery","setFilteredQuery","setFilteredQueryWithDebounce","useCallback","debounce","visibleColors","useMemo","pattern","RegExp","filter","test","getVisibleColors","onClick","type","value","onChange","event","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAEaA,EAAb,uKACY,IACAC,EAAWC,KAAKC,MAAhBF,OAGR,OAFAG,QAAQC,IAAI,aAGV,4BACGJ,EAAOK,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,GAAQD,WAR3B,GAAgCG,iBCG1BC,G,MAAmB,CAAC,QAAS,SAAU,OAAQ,OAAQ,QAAS,UAQzDC,EAAU,WAAO,IAAD,EACDC,mBAAiB,GADhB,mBACpBC,EADoB,KACbC,EADa,OAEDF,mBAAiB,IAFhB,mBAEpBG,EAFoB,KAEbC,EAFa,OAGGJ,mBAAiB,GAHpB,mBAGpBK,EAHoB,KAGXC,EAHW,OAIeN,mBAAiB,IAJhC,mBAIpBO,EAJoB,KAILC,EAJK,KAMrBC,EAA+BC,sBACnCC,IAASH,EAAkB,KAC3B,IASII,EAAgBC,mBACpB,kBAxBqB,SAACzB,EAAkBe,GAC1C,IAAMW,EAAU,IAAIC,OAAOZ,EAAO,KAElC,OADAZ,QAAQC,IAAI,aACLJ,EAAO4B,QAAO,SAACtB,GAAD,OAAWoB,EAAQG,KAAKvB,MAqBrCwB,CAAiBpB,EAAkBS,KACzC,CAACA,IAGH,OACE,oCACE,wBAAIY,QAAS,kBAAMjB,EAASD,EAAQ,KAApC,YAAkDA,GAClD,2BAAOmB,KAAK,OAAOC,MAAOlB,EAAOmB,SAdhB,SAACC,GACpBnB,EAASmB,EAAMC,OAAOH,OACtBZ,EAA6Bc,EAAMC,OAAOH,OAC1Cf,EAAWD,EAAU,MAYnB,kBAAC,EAAD,CAAYjB,OAAQwB,MCnC1Ba,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c5f14878.chunk.js","sourcesContent":["import React, { FC, PureComponent } from 'react';\n\nexport class ColorsList extends PureComponent<{ colors: string[] }> {\n  render() {\n    const { colors } = this.props;\n    console.log('rendering');\n\n    return (\n      <ul>\n        {colors.map((color, index) => (\n          <li key={index}>{color}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\n// export const ColorsList: FC<{ colors: string[] }> = ({ colors }) => {\n//   console.log('rendering');\n//   return (\n//     <ul>\n//       {colors.map((color, index) => (\n//         <li key={index}>{color}</li>\n//       ))}\n//     </ul>\n//   );\n// };\n","import React, { FC, useState, useCallback, useMemo } from 'react';\nimport debounce from 'lodash/debounce';\nimport { ColorsList } from './components/ColorsList';\nimport './App.css';\n\nconst colorsFromServer = ['white', 'purple', 'pink', 'blue', 'brown', 'black'];\n\nconst getVisibleColors = (colors: string[], query: string) => {\n  const pattern = new RegExp(query, 'i');\n  console.log('filtering');\n  return colors.filter((color) => pattern.test(color));\n};\n\nexport const App: FC = () => {\n  const [count, setCount] = useState<number>(0);\n  const [query, setQuery] = useState<string>('');\n  const [counter, setCounter] = useState<number>(0);\n  const [filteredQuery, setFilteredQuery] = useState<string>('');\n\n  const setFilteredQueryWithDebounce = useCallback(\n    debounce(setFilteredQuery, 1000),\n    []\n  );\n\n  const hadnleChange = (event: any) => {\n    setQuery(event.target.value);\n    setFilteredQueryWithDebounce(event.target.value);\n    setCounter(counter + 1);\n  };\n\n  const visibleColors = useMemo(\n    () => getVisibleColors(colorsFromServer, filteredQuery),\n    [filteredQuery]\n  );\n\n  return (\n    <>\n      <h3 onClick={() => setCount(count + 1)}>Count is {count}</h3>\n      <input type=\"text\" value={query} onChange={hadnleChange} />\n      <ColorsList colors={visibleColors} />\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}